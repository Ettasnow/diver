package dtrTypes

import "time"

//DTRServerStatus -
type DTRServerStatus struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Network struct {
		CanonicalAddresses []struct {
			Host string `json:"host"`
			Port int    `json:"port"`
		} `json:"canonical_addresses"`
		ClusterPort int `json:"cluster_port"`
		ConnectedTo struct {
		} `json:"connected_to"`
		Hostname      string    `json:"hostname"`
		HTTPAdminPort string    `json:"http_admin_port"`
		ReqlPort      int       `json:"reql_port"`
		TimeConnected time.Time `json:"time_connected"`
	} `json:"network"`
	Process struct {
		Argv        []string  `json:"argv"`
		CacheSizeMb float64   `json:"cache_size_mb"`
		Pid         int       `json:"pid"`
		TimeStarted time.Time `json:"time_started"`
		Version     string    `json:"version"`
	} `json:"process"`
}

//DTRStats -
type DTRStats struct {
	ID          []string `json:"id"`
	QueryEngine struct {
		ClientConnections float64 `json:"client_connections"`
		ClientsActive     float64 `json:"clients_active"`
		QueriesPerSec     float64 `json:"queries_per_sec"`
		ReadDocsPerSec    float64 `json:"read_docs_per_sec"`
		WrittenDocsPerSec float64 `json:"written_docs_per_sec"`
	} `json:"query_engine"`
	Server        string `json:"server,omitempty"`
	Db            string `json:"db,omitempty"`
	Table         string `json:"table,omitempty"`
	StorageEngine struct {
		Cache struct {
			InUseBytes int `json:"in_use_bytes"`
		} `json:"cache"`
		Disk struct {
			ReadBytesPerSec float64 `json:"read_bytes_per_sec"`
			ReadBytesTotal  float64 `json:"read_bytes_total"`
			SpaceUsage      struct {
				DataBytes         int `json:"data_bytes"`
				GarbageBytes      int `json:"garbage_bytes"`
				MetadataBytes     int `json:"metadata_bytes"`
				PreallocatedBytes int `json:"preallocated_bytes"`
			} `json:"space_usage"`
			WrittenBytesPerSec float64 `json:"written_bytes_per_sec"`
			WrittenBytesTotal  float64 `json:"written_bytes_total"`
		} `json:"disk"`
	} `json:"storage_engine,omitempty"`
}

//DTRCluster is the cluster that has all information about DTR plus replicas (AutoGenerated)
type DTRCluster struct {
	RethinkSystemTables struct {
		ClusterConfig []struct {
			HeartbeatTimeoutSecs int    `json:"heartbeat_timeout_secs"`
			ID                   string `json:"id"`
		} `json:"cluster_config"`
		CurrentIssues []interface{} `json:"current_issues"`
		DbConfig      []struct {
			ID   string `json:"id"`
			Name string `json:"name"`
		} `json:"db_config"`
		ServerStatus []DTRServerStatus `json:"server_status"`
		Stats        []DTRStats        `json:"stats"`
		TableConfig  []struct {
			Db         string        `json:"db"`
			Durability string        `json:"durability"`
			ID         string        `json:"id"`
			Indexes    []interface{} `json:"indexes"`
			Name       string        `json:"name"`
			PrimaryKey string        `json:"primary_key"`
			Shards     []struct {
				NonvotingReplicas []interface{} `json:"nonvoting_replicas"`
				PrimaryReplica    string        `json:"primary_replica"`
				Replicas          []string      `json:"replicas"`
			} `json:"shards"`
			WriteAcks string `json:"write_acks"`
		} `json:"table_config"`
		TableStatus []struct {
			Db         string `json:"db"`
			ID         string `json:"id"`
			Name       string `json:"name"`
			RaftLeader string `json:"raft_leader"`
			Shards     []struct {
				PrimaryReplicas []string `json:"primary_replicas"`
				Replicas        []struct {
					Server string `json:"server"`
					State  string `json:"state"`
				} `json:"replicas"`
			} `json:"shards"`
			Status struct {
				AllReplicasReady      bool `json:"all_replicas_ready"`
				ReadyForOutdatedReads bool `json:"ready_for_outdated_reads"`
				ReadyForReads         bool `json:"ready_for_reads"`
				ReadyForWrites        bool `json:"ready_for_writes"`
			} `json:"status"`
		} `json:"table_status"`
	} `json:"rethink_system_tables"`
	ReplicaHealth    map[string]interface{} `json:"replica_health"`    //string
	ReplicaTimestamp interface{}            `json:"replica_timestamp"` //time.time
	ReplicaReadonly  interface{}            `json:"replica_readonly"`  //bool
	GcLockHolder     string                 `json:"gc_lock_holder"`
}

// DTRWebHook - The struct that defines web hook in DTR
type DTRWebHook struct {
	ID           string `json:"id"`
	EndPoint     string `json:"endpoint"`
	Key          string `json:"key"`
	Type         string `json:"type"`
	AuthorID     string `json:"authorID"`
	CreatedAt    string `json:"createdAt"`
	SuccessfulAt string `json:"autlastSuccessfulAthorID"`
	InActive     bool   `json:"inactive"`
}
